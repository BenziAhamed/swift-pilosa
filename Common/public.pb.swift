/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: public.proto
 *
 */

import Foundation

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: ProtobufAPIVersionCheck {
  struct _1: ProtobufAPIVersion_1 {}
  typealias Version = _1
}

struct Internal_Bitmap: Message {
  static let protoMessageName: String = _protobuf_package + ".Bitmap"

  var bits: [UInt64] = []

  var attrs: [Internal_Attr] = []

  var unknownFields = UnknownStorage()

  init() {}

  mutating func decodeMessage<D: Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedUInt64Field(value: &self.bits)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.attrs)
      default: break
      }
    }
  }

  func traverse<V: Visitor>(visitor: inout V) throws {
    if !self.bits.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.bits, fieldNumber: 1)
    }
    if !self.attrs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attrs, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Internal_Pair: Message {
  static let protoMessageName: String = _protobuf_package + ".Pair"

  var key: UInt64 = 0

  var count: UInt64 = 0

  var unknownFields = UnknownStorage()

  init() {}

  mutating func decodeMessage<D: Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.key)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.count)
      default: break
      }
    }
  }

  func traverse<V: Visitor>(visitor: inout V) throws {
    if self.key != 0 {
      try visitor.visitSingularUInt64Field(value: self.key, fieldNumber: 1)
    }
    if self.count != 0 {
      try visitor.visitSingularUInt64Field(value: self.count, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Internal_Bit: Message {
  static let protoMessageName: String = _protobuf_package + ".Bit"

  var rowId: UInt64 = 0

  var columnId: UInt64 = 0

  var timestamp: Int64 = 0

  var unknownFields = UnknownStorage()

  init() {}

  mutating func decodeMessage<D: Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.rowId)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.columnId)
      case 3: try decoder.decodeSingularInt64Field(value: &self.timestamp)
      default: break
      }
    }
  }

  func traverse<V: Visitor>(visitor: inout V) throws {
    if self.rowId != 0 {
      try visitor.visitSingularUInt64Field(value: self.rowId, fieldNumber: 1)
    }
    if self.columnId != 0 {
      try visitor.visitSingularUInt64Field(value: self.columnId, fieldNumber: 2)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularInt64Field(value: self.timestamp, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Internal_ColumnAttrSet: Message {
  static let protoMessageName: String = _protobuf_package + ".ColumnAttrSet"

  var id: UInt64 = 0

  var attrs: [Internal_Attr] = []

  var unknownFields = UnknownStorage()

  init() {}

  mutating func decodeMessage<D: Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.id)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.attrs)
      default: break
      }
    }
  }

  func traverse<V: Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.attrs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attrs, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Internal_Attr: Message {
  static let protoMessageName: String = _protobuf_package + ".Attr"

  var key: String = String()

  var type: UInt64 = 0

  var stringValue: String = String()

  var intValue: Int64 = 0

  var boolValue: Bool = false

  var floatValue: Double = 0

  var unknownFields = UnknownStorage()

  init() {}

  mutating func decodeMessage<D: Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.key)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.type)
      case 3: try decoder.decodeSingularStringField(value: &self.stringValue)
      case 4: try decoder.decodeSingularInt64Field(value: &self.intValue)
      case 5: try decoder.decodeSingularBoolField(value: &self.boolValue)
      case 6: try decoder.decodeSingularDoubleField(value: &self.floatValue)
      default: break
      }
    }
  }

  func traverse<V: Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if self.type != 0 {
      try visitor.visitSingularUInt64Field(value: self.type, fieldNumber: 2)
    }
    if !self.stringValue.isEmpty {
      try visitor.visitSingularStringField(value: self.stringValue, fieldNumber: 3)
    }
    if self.intValue != 0 {
      try visitor.visitSingularInt64Field(value: self.intValue, fieldNumber: 4)
    }
    if self.boolValue != false {
      try visitor.visitSingularBoolField(value: self.boolValue, fieldNumber: 5)
    }
    if self.floatValue != 0 {
      try visitor.visitSingularDoubleField(value: self.floatValue, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Internal_AttrMap: Message {
  static let protoMessageName: String = _protobuf_package + ".AttrMap"

  var attrs: [Internal_Attr] = []

  var unknownFields = UnknownStorage()

  init() {}

  mutating func decodeMessage<D: Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.attrs)
      default: break
      }
    }
  }

  func traverse<V: Visitor>(visitor: inout V) throws {
    if !self.attrs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attrs, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Internal_QueryRequest: Message {
  static let protoMessageName: String = _protobuf_package + ".QueryRequest"

  var query: String = String()

  var slices: [UInt64] = []

  var columnAttrs: Bool = false

  var quantum: String = String()

  var remote: Bool = false

  var unknownFields = UnknownStorage()

  init() {}

  mutating func decodeMessage<D: Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.query)
      case 2: try decoder.decodeRepeatedUInt64Field(value: &self.slices)
      case 3: try decoder.decodeSingularBoolField(value: &self.columnAttrs)
      case 4: try decoder.decodeSingularStringField(value: &self.quantum)
      case 5: try decoder.decodeSingularBoolField(value: &self.remote)
      default: break
      }
    }
  }

  func traverse<V: Visitor>(visitor: inout V) throws {
    if !self.query.isEmpty {
      try visitor.visitSingularStringField(value: self.query, fieldNumber: 1)
    }
    if !self.slices.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.slices, fieldNumber: 2)
    }
    if self.columnAttrs != false {
      try visitor.visitSingularBoolField(value: self.columnAttrs, fieldNumber: 3)
    }
    if !self.quantum.isEmpty {
      try visitor.visitSingularStringField(value: self.quantum, fieldNumber: 4)
    }
    if self.remote != false {
      try visitor.visitSingularBoolField(value: self.remote, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Internal_QueryResponse: Message {
  static let protoMessageName: String = _protobuf_package + ".QueryResponse"

  var err: String = String()

  var results: [Internal_QueryResult] = []

  var columnAttrSets: [Internal_ColumnAttrSet] = []

  var unknownFields = UnknownStorage()

  init() {}

  mutating func decodeMessage<D: Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.err)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.results)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.columnAttrSets)
      default: break
      }
    }
  }

  func traverse<V: Visitor>(visitor: inout V) throws {
    if !self.err.isEmpty {
      try visitor.visitSingularStringField(value: self.err, fieldNumber: 1)
    }
    if !self.results.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.results, fieldNumber: 2)
    }
    if !self.columnAttrSets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.columnAttrSets, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

struct Internal_QueryResult: Message {
  static let protoMessageName: String = _protobuf_package + ".QueryResult"

  var bitmap: Internal_Bitmap {
    get {return _storage._bitmap ?? Internal_Bitmap()}
    set {_uniqueStorage()._bitmap = newValue}
  }
  var hasBitmap: Bool {
    return _storage._bitmap != nil
  }
  mutating func clearBitmap() {
    _storage._bitmap = nil
  }

  var n: UInt64 {
    get {return _storage._n}
    set {_uniqueStorage()._n = newValue}
  }

  var pairs: [Internal_Pair] {
    get {return _storage._pairs}
    set {_uniqueStorage()._pairs = newValue}
  }

  var changed: Bool {
    get {return _storage._changed}
    set {_uniqueStorage()._changed = newValue}
  }

  var unknownFields = UnknownStorage()

  init() {}

  mutating func decodeMessage<D: Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._bitmap)
        case 2: try decoder.decodeSingularUInt64Field(value: &_storage._n)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._pairs)
        case 4: try decoder.decodeSingularBoolField(value: &_storage._changed)
        default: break
        }
      }
    }
  }

  func traverse<V: Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._bitmap {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._n != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._n, fieldNumber: 2)
      }
      if !_storage._pairs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._pairs, fieldNumber: 3)
      }
      if _storage._changed != false {
        try visitor.visitSingularBoolField(value: _storage._changed, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass()
}

struct Internal_ImportRequest: Message {
  static let protoMessageName: String = _protobuf_package + ".ImportRequest"

  var db: String = String()

  var frame: String = String()

  var slice: UInt64 = 0

  var rowIds: [UInt64] = []

  var columnIds: [UInt64] = []

  var timestamps: [Int64] = []

  var unknownFields = UnknownStorage()

  init() {}

  mutating func decodeMessage<D: Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.db)
      case 2: try decoder.decodeSingularStringField(value: &self.frame)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.slice)
      case 4: try decoder.decodeRepeatedUInt64Field(value: &self.rowIds)
      case 5: try decoder.decodeRepeatedUInt64Field(value: &self.columnIds)
      case 6: try decoder.decodeRepeatedInt64Field(value: &self.timestamps)
      default: break
      }
    }
  }

  func traverse<V: Visitor>(visitor: inout V) throws {
    if !self.db.isEmpty {
      try visitor.visitSingularStringField(value: self.db, fieldNumber: 1)
    }
    if !self.frame.isEmpty {
      try visitor.visitSingularStringField(value: self.frame, fieldNumber: 2)
    }
    if self.slice != 0 {
      try visitor.visitSingularUInt64Field(value: self.slice, fieldNumber: 3)
    }
    if !self.rowIds.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.rowIds, fieldNumber: 4)
    }
    if !self.columnIds.isEmpty {
      try visitor.visitPackedUInt64Field(value: self.columnIds, fieldNumber: 5)
    }
    if !self.timestamps.isEmpty {
      try visitor.visitPackedInt64Field(value: self.timestamps, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "internal"

extension Internal_Bitmap: _MessageImplementationBase, _ProtoNameProviding {
  static let _protobuf_nameMap: _NameMap = [
    1: .same(proto: "Bits"),
    2: .same(proto: "Attrs"),
  ]

  func _protobuf_generated_isEqualTo(other: Internal_Bitmap) -> Bool {
    if self.bits != other.bits {return false}
    if self.attrs != other.attrs {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Internal_Pair: _MessageImplementationBase, _ProtoNameProviding {
  static let _protobuf_nameMap: _NameMap = [
    1: .same(proto: "Key"),
    2: .same(proto: "Count"),
  ]

  func _protobuf_generated_isEqualTo(other: Internal_Pair) -> Bool {
    if self.key != other.key {return false}
    if self.count != other.count {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Internal_Bit: _MessageImplementationBase, _ProtoNameProviding {
  static let _protobuf_nameMap: _NameMap = [
    1: .same(proto: "RowID"),
    2: .same(proto: "ColumnID"),
    3: .same(proto: "Timestamp"),
  ]

  func _protobuf_generated_isEqualTo(other: Internal_Bit) -> Bool {
    if self.rowId != other.rowId {return false}
    if self.columnId != other.columnId {return false}
    if self.timestamp != other.timestamp {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Internal_ColumnAttrSet: _MessageImplementationBase, _ProtoNameProviding {
  static let _protobuf_nameMap: _NameMap = [
    1: .same(proto: "ID"),
    2: .same(proto: "Attrs"),
  ]

  func _protobuf_generated_isEqualTo(other: Internal_ColumnAttrSet) -> Bool {
    if self.id != other.id {return false}
    if self.attrs != other.attrs {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Internal_Attr: _MessageImplementationBase, _ProtoNameProviding {
  static let _protobuf_nameMap: _NameMap = [
    1: .same(proto: "Key"),
    2: .same(proto: "Type"),
    3: .same(proto: "StringValue"),
    4: .same(proto: "IntValue"),
    5: .same(proto: "BoolValue"),
    6: .same(proto: "FloatValue"),
  ]

  func _protobuf_generated_isEqualTo(other: Internal_Attr) -> Bool {
    if self.key != other.key {return false}
    if self.type != other.type {return false}
    if self.stringValue != other.stringValue {return false}
    if self.intValue != other.intValue {return false}
    if self.boolValue != other.boolValue {return false}
    if self.floatValue != other.floatValue {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Internal_AttrMap: _MessageImplementationBase, _ProtoNameProviding {
  static let _protobuf_nameMap: _NameMap = [
    1: .same(proto: "Attrs"),
  ]

  func _protobuf_generated_isEqualTo(other: Internal_AttrMap) -> Bool {
    if self.attrs != other.attrs {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Internal_QueryRequest: _MessageImplementationBase, _ProtoNameProviding {
  static let _protobuf_nameMap: _NameMap = [
    1: .same(proto: "Query"),
    2: .same(proto: "Slices"),
    3: .same(proto: "ColumnAttrs"),
    4: .same(proto: "Quantum"),
    5: .same(proto: "Remote"),
  ]

  func _protobuf_generated_isEqualTo(other: Internal_QueryRequest) -> Bool {
    if self.query != other.query {return false}
    if self.slices != other.slices {return false}
    if self.columnAttrs != other.columnAttrs {return false}
    if self.quantum != other.quantum {return false}
    if self.remote != other.remote {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Internal_QueryResponse: _MessageImplementationBase, _ProtoNameProviding {
  static let _protobuf_nameMap: _NameMap = [
    1: .same(proto: "Err"),
    2: .same(proto: "Results"),
    3: .same(proto: "ColumnAttrSets"),
  ]

  func _protobuf_generated_isEqualTo(other: Internal_QueryResponse) -> Bool {
    if self.err != other.err {return false}
    if self.results != other.results {return false}
    if self.columnAttrSets != other.columnAttrSets {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Internal_QueryResult: _MessageImplementationBase, _ProtoNameProviding {
  static let _protobuf_nameMap: _NameMap = [
    1: .same(proto: "Bitmap"),
    2: .same(proto: "N"),
    3: .same(proto: "Pairs"),
    4: .same(proto: "Changed"),
  ]

  fileprivate class _StorageClass {
    var _bitmap: Internal_Bitmap? = nil
    var _n: UInt64 = 0
    var _pairs: [Internal_Pair] = []
    var _changed: Bool = false

    init() {}

    init(copying source: _StorageClass) {
      _bitmap = source._bitmap
      _n = source._n
      _pairs = source._pairs
      _changed = source._changed
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  func _protobuf_generated_isEqualTo(other: Internal_QueryResult) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_storage, other_storage) in
        if _storage._bitmap != other_storage._bitmap {return false}
        if _storage._n != other_storage._n {return false}
        if _storage._pairs != other_storage._pairs {return false}
        if _storage._changed != other_storage._changed {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Internal_ImportRequest: _MessageImplementationBase, _ProtoNameProviding {
  static let _protobuf_nameMap: _NameMap = [
    1: .same(proto: "DB"),
    2: .same(proto: "Frame"),
    3: .same(proto: "Slice"),
    4: .same(proto: "RowIDs"),
    5: .same(proto: "ColumnIDs"),
    6: .same(proto: "Timestamps"),
  ]

  func _protobuf_generated_isEqualTo(other: Internal_ImportRequest) -> Bool {
    if self.db != other.db {return false}
    if self.frame != other.frame {return false}
    if self.slice != other.slice {return false}
    if self.rowIds != other.rowIds {return false}
    if self.columnIds != other.columnIds {return false}
    if self.timestamps != other.timestamps {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
